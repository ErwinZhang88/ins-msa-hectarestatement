const blockModel = require( '../models/block.js' );
const querystring = require('querystring');
const url = require( 'url' );
const jwt = require( 'jsonwebtoken' );
const config = require( '../../config/config.js' );
const uuid = require( 'uuid' );
const nJwt = require( 'njwt' );
const jwtDecode = require( 'jwt-decode' );
const Client = require('node-rest-client').Client; 
const moment_pure = require( 'moment' );
const moment = require( 'moment-timezone' );
const date = require( '../libraries/date.js' );
const fs = require( 'file-system' );
const gp = require( 'geojson-precision' ); // GeoJSON Precision
const gr = require('geojson-reducer'); // GeoJSON Reducer

function recursiveFix(coords) {
	if (coords instanceof Array) {
		coords.forEach( function( coord, i ) {
			console.log( 'iii->' + i );
			if (coords[i] instanceof Array && coords[i].length > 0 && coords[i][0] instanceof Array) {
				// In a container
				coords[i] = recursiveFix(coord);
			} else if (i < coords.length - 1) {
				// In a point
				while ( coords[i][0] == coords[i + 1][0] && coords[i][1] == coords[i + 1][1]) {
					console.log(coords.splice(i + 1, 1));
				}
			}
		});
		
		return coords;
	}
}

function findDuplicates(coords) {
  var flattened = [].concat.apply([], coords);
  var repeats = [];
  
  do {
    var point = flattened.shift();
                                   
    flattened.forEach( function( testPoint ) {
      if (testPoint[0] == point[0] && testPoint[1] == point[1])  {
        repeats.push(point);
      }                 
    });
  } while (flattened.length > 0);
    
  return repeats;
}

	exports.test = ( req, res ) => {
		var original = [
			{"type":"Polygon","coordinates":[[[30.0055140000865,-26.7491040003595],[30.004495999925,-26.7466959999756],[30.0014479997168,-26.7464999999339],[29.9948631137942,-26.7490646584093],[29.9916779999136,-26.7573009995986],[29.983665000163,-26.7615130004032],[29.9812510004018,-26.7599409998852],[29.9810370004296,-26.7564469998024],[29.9707320002464,-26.7524720000301],[29.9624689997636,-26.7716059998072],[29.9343589999117,-26.7636380003324],[29.9297790001301,-26.7648110004443],[29.9267540000828,-26.763672000101],[29.9238619998712,-26.7676089999202],[29.9233149998373,-26.7767729996678],[29.9190270000261,-26.7788910001736],[29.9174100001316,-26.7819920001269],[29.9202309997684,-26.7839600000135],[29.9197770004242,-26.7862090002627],[29.9224800000175,-26.7887919997203],[29.9188580003296,-26.7900049998775],[29.9142360004105,-26.7847499995576],[29.9128230000272,-26.7961770001999],[29.904501000422,-26.7862219999626],[29.9023080000563,-26.7876049998623],[29.900880999927,-26.7957480002095],[29.8994270003517,-26.7962669998519],[29.8935320002076,-26.7926270002336],[29.8923739998878,-26.7884959995656],[29.890064000424,-26.7874109999128],[29.8914199999784,-26.7862609999618],[29.8873690003001,-26.7825149999538],[29.8859040002178,-26.7843340001665],[29.8880019998016,-26.7849919999211],[29.8879910001939,-26.7864479995886],[29.8847659999205,-26.7872390000781],[29.8825050000175,-26.792483999937],[29.8816360004291,-26.7889729999699],[29.874869999705,-26.7905560000957],[29.8741230003445,-26.7861520003331],[29.8700959999738,-26.7852710001915],[29.8675420000544,-26.7893260000542],[29.870813353359,-26.7993486267875],[29.8695299999636,-26.8012260000171],[29.8710457396571,-26.8073376675627],[29.8689375601834,-26.8102763810769],[29.8676395110593,-26.8118555127471],[29.863715999956,-26.8136289997842],[29.8662069996693,-26.8096810003573],[29.8519990003348,-26.8006549997763],[29.8520510000339,-26.7978269998168],[29.8444000045043,-26.798493785157],[29.8403239999519,-26.802861999888],[29.8478679996668,-26.8061559997447],[29.8475229999513,-26.8076860001254],[29.8432659997704,-26.8064820003831],[29.8450130002614,-26.8095800001981],[29.8376849997114,-26.8085209999452],[29.8365189999221,-26.8096709998963],[29.8384970002697,-26.8094290004321],[29.8372339996063,-26.8129249997078],[29.8438299996885,-26.8187239999232],[29.8410849999578,-26.8181149997294],[29.8375550000142,-26.8225799996058],[29.8329409995645,-26.8211749995913],[29.8332500003185,-26.8281560003336],[29.8307568845886,-26.8303266488725],[29.8266619997058,-26.829573000002],[29.8233990003787,-26.8253040001672],[29.813376999751,-26.8193930001849],[29.8142680003535,-26.8171270000514],[29.8123930002574,-26.8164330004359],[29.813662000298,-26.8153099999308],[29.8107399996028,-26.8115350003847],[29.8019829997306,-26.8103709997883],[29.7951403649127,-26.8139432159376],[29.794774676291,-26.8141813813016],[29.7949219997972,-26.8182580000259],[29.8028942807049,-26.8205376059375],[29.8031797864495,-26.8209522983766],[29.8038536727516,-26.8237921132728],[29.8003999996048,-26.8296449997237],[29.7941949995599,-26.8236809999962],[29.7913269995553,-26.8236979998805],[29.7899360001861,-26.8256610004359],[29.7940459998861,-26.8329089999961],[29.7994730000407,-26.8361609997154],[29.802759000428,-26.8408049997493],[29.7989959996364,-26.8478790002819],[29.7943399999487,-26.8473700002011],[29.7880899996281,-26.8492529997668],[29.786089000019,-26.8447689999138],[29.7811550001069,-26.841948000277],[29.7790280000856,-26.8444899996433],[29.7800870003385,-26.8480779995626],[29.7739869997378,-26.8520069999124],[29.7711179996871,-26.8567730001741],[29.7684210003703,-26.8573839995608],[29.7676299998809,-26.8492949999042],[29.7616670001995,-26.8394969997095],[29.7648579998049,-26.8375639996377],[29.7629329332927,-26.8338352298328],[29.7600261333548,-26.8318553953452],[29.7590764996782,-26.8313852025504],[29.755381000018,-26.8327879998144],[29.751519194744,-26.83137255374],[29.750887769359,-26.8318016704292],[29.7498706404137,-26.833869963921],[29.7496943615378,-26.8342284203916],[29.7472949996004,-26.8337019996785],[29.7468631911358,-26.8318507250576],[29.7466789886258,-26.8319514947118],[29.7414990004226,-26.839889999839],[29.742991999997,-26.8473300001559],[29.7378030000215,-26.8477400001698],[29.7379470003641,-26.8519730001437],[29.7335409996101,-26.8555660002935],[29.7316590000905,-26.8555529996942],[29.7247350001771,-26.8492549998589],[29.7243969579668,-26.8413799148581],[29.7228319996896,-26.8409819998145],[29.7192020860739,-26.8436422000479],[29.7178151393974,-26.8434631568394],[29.7076921523822,-26.8421563639354],[29.704841999587,-26.8434159995983],[29.7049100000236,-26.8486210003114],[29.7020929996718,-26.8507080002875],[29.700993000227,-26.8541810003016],[29.696972000133,-26.8550030004215],[29.6909070002463,-26.8514100002717],[29.683847000359,-26.8571620001192],[29.6621609998554,-26.8590449996848],[29.6581766229158,-26.8635927058059],[29.658051365106,-26.8643053951739],[29.6577759121531,-26.8690236659278],[29.657470566288,-26.8742539764014],[29.657470566288,-26.8742539764014],[29.6571499999911,-26.8797449997034],[29.6555419996122,-26.8806710001207],[29.6480936544037,-26.8770925617169],[29.6467941983788,-26.8760009986505],[29.6393739998606,-26.8660719998496],[29.6342599997452,-26.8620850004235],[29.6317960003771,-26.8619460003114],[29.6389310001243,-26.8057580002841],[29.6316930001257,-26.7675360001524],[29.5651819999848,-26.7684900000618],[29.5678040003409,-26.734338999631],[29.5666100001602,-26.7165909998919],[29.6273349997856,-26.715841000393],[29.6224959997562,-26.6645640001169],[29.64060199981,-26.6273879996388],[29.642100999661,-26.5802349997081],[29.6398389997119,-26.5292019998876],[29.6194319997098,-26.5285280002948],[29.6293619996939,-26.4809529997971],[29.6282479996037,-26.4738919998637],[29.6257440001904,-26.4626390000477],[29.6068820003611,-26.4452289997014],[29.5947090004043,-26.4080730001453],[29.6539970003388,-26.3750990000108],[29.6535050001423,-26.3711489995924],[29.7001609996461,-26.3336700004355],[29.686131000423,-26.3083499996907],[29.6717830000309,-26.3124790002666],[29.6423029999793,-26.2685200000795],[29.6495060001631,-26.2417790003813],[29.6678830001186,-26.2440930000295],[29.6976679998406,-26.2310070002547],[29.6977770003685,-26.2270969998815],[29.7053569999443,-26.2275730002397],[29.7156119996214,-26.2032929997713],[29.7590940003034,-26.224854999955],[29.8049370001023,-26.1889509996558],[29.8008329997795,-26.1629519999871],[29.8729520003247,-26.1061779999268],[29.8850020000075,-26.1142460004141],[29.8671570002936,-26.1376110000729],[29.9151460000903,-26.1828649997005],[29.9074440002866,-26.1904509995529],[29.9293229997944,-26.2007480002667],[29.9266990002454,-26.203262000141],[29.9693070002093,-26.2428110002889],[29.9993500001329,-26.216389000007],[30.0491519998658,-26.1918070000066],[30.0823650002255,-26.2360800002789],[30.1008780001549,-26.2779870003047],[30.1244300003399,-26.2836440002697],[30.1252569997909,-26.2770609998873],[30.1377090000181,-26.2765410001989],[30.1406669996748,-26.2640710000412],[30.177421999632,-26.2491569996388],[30.2237189996742,-26.1772249996199],[30.2288359999281,-26.2174320004217],[30.3220249995611,-26.1831419998787],[30.3076610002301,-26.158318999561],[30.3910080003382,-26.1777290003695],[30.494110000071,-26.2324809998526],[30.5929830000143,-26.2074279997244],[30.6494850001267,-26.1664239999551],[30.772935999886,-26.1434250000805],[30.8123229997609,-26.1751860000578],[30.8178809996589,-26.2096210000901],[30.8024410001908,-26.2226520000276],[30.7683049995521,-26.2332880001803],[30.7687110002809,-26.2349149996364],[30.7334289998755,-26.2721229997909],[30.7291680004095,-26.3124370001292],[30.7568609999249,-26.3329579999904],[30.7341630004355,-26.3665119998812],[30.7500109998253,-26.3746320000675],[30.769477999664,-26.4130799998251],[30.7203660002616,-26.4144550002554],[30.7047230004291,-26.4433690002967],[30.7203899995693,-26.4555549999533],[30.7726500001922,-26.4473300003229],[30.8061260000848,-26.466628999612],[30.7927800000161,-26.5689070000321],[30.791668000018,-26.7145730003984],[30.7938980002907,-26.7362159998193],[30.7930352598072,-26.7347811442587],[30.7914001920142,-26.7320618026261],[30.7908329455913,-26.7311757667562],[30.7883259997474,-26.7303469999744],[30.7722380000862,-26.7335189996033],[30.7591631007407,-26.734022453227],[30.757298000284,-26.7322499995627],[30.7583769996601,-26.7278859998453],[30.7540550000802,-26.7272049999299],[30.7496189997419,-26.7173689997821],[30.7377470001704,-26.7136229997741],[30.7380050003721,-26.7106320003949],[30.742415999558,-26.7070600003139],[30.7430059997753,-26.7044870004178],[30.7390790004171,-26.7030909999189],[30.7260529998109,-26.6931989998877],[30.7207780003677,-26.6921199996123],[30.7175920000934,-26.6840520000243],[30.7120720001485,-26.683423999854],[30.7049239998019,-26.6798479995886],[30.7038329998726,-26.6758770000007],[30.6993389995586,-26.6759339999302],[30.6406749996101,-26.6534610000208],[30.6251960001428,-26.6799550000243],[30.6195089996942,-26.679626000147],[30.6071379996036,-26.6835439999896],[30.6097789999362,-26.6916939997602],[30.6037449996799,-26.6924230000896],[30.5956079996093,-26.6881259998635],[30.5920959995961,-26.6893010000677],[30.5925269996787,-26.6962660000724],[30.6015170003988,-26.6959420004256],[30.6040150004349,-26.6988719996909],[30.5985050000515,-26.6988699995987],[30.5987380000001,-26.7036299995839],[30.601460999616,-26.7082809999405],[30.5992130155267,-26.7161617080919],[30.5967059448171,-26.7159246022322],[30.5939620001768,-26.7070449996224],[30.5949225185686,-26.702421898064],[30.5866482882141,-26.70339198411],[30.5813446378153,-26.7040137938765],[30.576818000401,-26.698096999939],[30.5765732545803,-26.6981210663351],[30.5646397549028,-26.6992945136663],[30.5628246794454,-26.6994729940375],[30.5625386863134,-26.6990529746572],[30.5649639998606,-26.6889950003513],[30.5649141524122,-26.6889630808853],[30.564722684781,-26.688840475923],[30.5610221892302,-26.6892807951545],[30.5557531147168,-26.6910283891878],[30.5521892709572,-26.6929432747076],[30.5521213773891,-26.6934597592634],[30.5568639996969,-26.6962009997741],[30.5554733526021,-26.701712449007],[30.5467510002703,-26.6992679999588],[30.5444070001386,-26.7127299999787],[30.5338059998006,-26.7203709996685],[30.5337370002172,-26.722674999755],[30.5289550001173,-26.7208389996579],[30.5247519997276,-26.7238330000748],[30.5167369998848,-26.7233100002481],[30.5172080000126,-26.7266040001047],[30.5137620003438,-26.7294310000181],[30.513492999635,-26.7330589999826],[30.5114990003486,-26.7341730000728],[30.5062029999373,-26.7346040001554],[30.501752999853,-26.7286659998278],[30.499581999602,-26.7306539997369],[30.4995210003874,-26.7349910000083],[30.496258000161,-26.7327500001279],[30.4930190001417,-26.7345680002945],[30.490939999635,-26.7419050003601],[30.4853019996466,-26.7391530003067],[30.4812109999231,-26.7420430004261],[30.4768280002292,-26.7412200002602],[30.4727860000665,-26.7452620004229],[30.4730780000369,-26.7467000001599],[30.4757730001607,-26.7471959996415],[30.4750189995781,-26.7510360003852],[30.4687559995576,-26.7544399999167],[30.4648530004064,-26.7526170004189],[30.4592249999795,-26.7571279997178],[30.4496399997109,-26.7544209999401],[30.4469699998402,-26.7568820000693],[30.4440629998364,-26.756142000132],[30.4436970000522,-26.7587430004194],[30.4402599998989,-26.7554869996164],[30.4354949996833,-26.7554380000556],[30.4365119997988,-26.7533399995725],[30.4336930002542,-26.7506620002322],[30.4308850003173,-26.7589089999775],[30.4231410003763,-26.7580489999046],[30.4218619998747,-26.7548410004149],[30.4233399996569,-26.7535799998437],[30.4164947091311,-26.7516166671501],[30.4164226737729,-26.7515960063216],[30.4136869998511,-26.7542569995749],[30.414558000431,-26.7570040002971],[30.4105609996446,-26.7601810001564],[30.4095360000597,-26.7591320003645],[30.4078080004445,-26.760089999559],[30.4064709999673,-26.7635309998966],[30.403687446167,-26.7611929182614],[30.4012349836014,-26.7591329409457],[30.4010465396039,-26.7591407175961],[30.3987268944434,-26.7658562989204],[30.3987080000497,-26.7659109998892],[30.3660370003927,-26.7707520000109],[30.3661649999977,-26.7735789999242],[30.3406560004333,-26.7744050002285],[30.3229889999314,-26.8237529997179],[30.2509979998907,-26.8242379995916],[30.1892259996662,-26.8164619999741],[30.2024189998767,-26.858270999979],[30.1744120002762,-26.8592910002328],[30.1672419998148,-26.8344520000767],[30.1381889996614,-26.8342970001263],[30.1279950000983,-26.7850269997359], [31.2050380001268,-27.3170380000119],[30.0596010003917,-26.8157579998977],[30.0207409996287,-26.8432409996253],[29.9916929997057,-26.8188110003363],[30.0083890004139,-26.7496969998158],[30.007608059842,-26.7478774002724],[30.0055140000865,-26.7491040003595]]]},
			{"type":"Polygon","coordinates":[[[30.4064709999673,-26.7635309998966],[30.4078080004445,-26.760089999559],[30.4095360000597,-26.7591320003645],[30.4105609996446,-26.7601810001564],[30.414558000431,-26.7570040002971],[30.4136869998511,-26.7542569995749],[30.4164226737729,-26.7515960063216],[30.4164947091311,-26.7516166671501],[30.4233399996569,-26.7535799998437],[30.4218619998747,-26.7548410004149],[30.4231410003763,-26.7580489999046],[30.4308850003173,-26.7589089999775],[30.4336930002542,-26.7506620002322],[30.4365119997988,-26.7533399995725],[30.4354949996833,-26.7554380000556],[30.4402599998989,-26.7554869996164],[30.4436970000522,-26.7587430004194],[30.4440629998364,-26.756142000132],[30.4469699998402,-26.7568820000693],[30.4496399997109,-26.7544209999401],[30.4592249999795,-26.7571279997178],[30.4648530004064,-26.7526170004189],[30.4687559995576,-26.7544399999167],[30.4750189995781,-26.7510360003852],[30.4757730001607,-26.7471959996415],[30.4730780000369,-26.7467000001599],[30.4727860000665,-26.7452620004229],[30.4768280002292,-26.7412200002602],[30.4812109999231,-26.7420430004261],[30.4853019996466,-26.7391530003067],[30.490939999635,-26.7419050003601],[30.4930190001417,-26.7345680002945],[30.496258000161,-26.7327500001279],[30.4995210003874,-26.7349910000083],[30.499581999602,-26.7306539997369],[30.501752999853,-26.7286659998278],[30.5062029999373,-26.7346040001554],[30.5114990003486,-26.7341730000728],[30.513492999635,-26.7330589999826],[30.5137620003438,-26.7294310000181],[30.5172080000126,-26.7266040001047],[30.5167369998848,-26.7233100002481],[30.5247519997276,-26.7238330000748],[30.5289550001173,-26.7208389996579],[30.5337370002172,-26.722674999755],[30.5338059998006,-26.7203709996685],[30.5444070001386,-26.7127299999787],[30.5467510002703,-26.6992679999588],[30.5554733526021,-26.701712449007],[30.5568639996969,-26.6962009997741],[30.5521213773891,-26.6934597592634],[30.5521892709572,-26.6929432747076],[30.5557531147168,-26.6910283891878],[30.5610221892302,-26.6892807951545],[30.564722684781,-26.688840475923],[30.5649141524122,-26.6889630808853],[30.5649639998606,-26.6889950003513],[30.5625386863134,-26.6990529746572],[30.5628246794454,-26.6994729940375],[30.5646397549028,-26.6992945136663],[30.5765732545803,-26.6981210663351],[30.576818000401,-26.698096999939],[30.5813446378153,-26.7040137938765],[30.5866482882141,-26.70339198411],[30.5949225185686,-26.702421898064],[30.5939620001768,-26.7070449996224],[30.5967059448171,-26.7159246022322],[30.5992130155267,-26.7161617080919],[30.601460999616,-26.7082809999405],[30.5987380000001,-26.7036299995839],[30.5985050000515,-26.6988699995987],[30.6040150004349,-26.6988719996909],[30.6015170003988,-26.6959420004256],[30.5925269996787,-26.6962660000724],[30.5920959995961,-26.6893010000677],[30.5956079996093,-26.6881259998635],[30.6037449996799,-26.6924230000896],[30.6097789999362,-26.6916939997602],[30.6071379996036,-26.6835439999896],[30.6195089996942,-26.679626000147],[30.6251960001428,-26.6799550000243],[30.6406749996101,-26.6534610000208],[30.6993389995586,-26.6759339999302],[30.7038329998726,-26.6758770000007],[30.7049239998019,-26.6798479995886],[30.7120720001485,-26.683423999854],[30.7175920000934,-26.6840520000243],[30.7207780003677,-26.6921199996123],[30.7260529998109,-26.6931989998877],[30.7390790004171,-26.7030909999189],[30.7430059997753,-26.7044870004178],[30.742415999558,-26.7070600003139],[30.7380050003721,-26.7106320003949],[30.7377470001704,-26.7136229997741],[30.7496189997419,-26.7173689997821],[30.7540550000802,-26.7272049999299],[30.7583769996601,-26.7278859998453],[30.757298000284,-26.7322499995627],[30.7591631007407,-26.734022453227],[30.7722380000862,-26.7335189996033],[30.7883259997474,-26.7303469999744],[30.7908329455913,-26.7311757667562],[30.7914001920142,-26.7320618026261],[30.7930352598072,-26.7347811442587],[30.8029789998097,-26.8241879999848],[30.8133510003835,-26.8435339996418],[30.8256170001306,-26.8393039998061],[30.8360790003564,-26.8263190001905],[30.8447760001608,-26.8240239996195],[30.8482209997835,-26.819044000285],[30.855492000404,-26.8180070001469],[30.8607790004003,-26.8191220002832],[30.8705330003653,-26.810728000057],[30.8880520003402,-26.8032839995557],[30.8883289996191,-26.7909340004331],[30.8919069999767,-26.7858030004333],[30.8916089997298,-26.7823260002347],[30.8923850004272,-26.7855820001385],[30.8931879996712,-26.8047770000295],[30.9025309995763,-26.8514060000873],[30.9065840002461,-26.8543590004129],[30.9096219999932,-26.8608950004273],[30.9150029998261,-26.8622249996825],[30.9415610000818,-26.8863999998074],[30.9482120000014,-26.8890709997242],[30.9694329997545,-26.9058489997157],[30.9737819996798,-26.9076859998589],[30.9770370004367,-26.9210869997649],[30.976992000161,-26.9507009996983],[30.9734759999634,-26.9638810002088],[30.9587019997193,-26.9918249996032],[30.9849819997506,-27.0364689998902],[31.0219820002096,-27.0672660003964],[31.0615440000575,-27.0957810000317],[31.1507640001948,-27.2015719996118],[31.2746829999436,-27.2426910001856],[31.2745746075003,-27.242806710617],[31.2050380001268,-27.3170380000119],[31.2050380001268,-27.3170380000119],[31.1661299998492,-27.368315000288],[31.1425638867341,-27.363299419159],[31.1411308260672,-27.3629944205365],[31.1411308260672,-27.3629944205365],[31.1012866601066,-27.3346754216295],[31.1012866601066,-27.3346754216295],[31.0989419999771,-27.3302209997614],[31.0989419999771,-27.3302209997614],[31.0985820072752,-27.330125251774],[31.0975020001479,-27.3298380000929],[31.0863590000066,-27.3347069997067],[31.0863590000065,-27.3347069997067],[31.0847688432032,-27.3364165682066],[31.0784089995628,-27.3432539997911],[31.0784089995628,-27.3432539997911],[31.0762741978623,-27.3424739602427],[31.0655159996914,-27.3385430002661],[31.0583806530538,-27.3408401605128],[31.0498329998136,-27.3435920000833],[31.0498329998136,-27.3435920000833],[31.0469340001786,-27.3502850001402],[31.0439549995539,-27.3528139998066],[31.0390069998958,-27.3520790000999],[31.0390069998958,-27.3520790000999],[31.0375906337676,-27.3500642867558],[31.0347580000836,-27.346035000282],[31.0347580000836,-27.346035000282],[31.0315339998564,-27.3456919997593],[31.0247290000325,-27.3515049997208],[31.0247290000325,-27.3515049997208],[31.0227500452457,-27.3558044019555],[31.0207710001446,-27.3601040004036],[31.0207710001446,-27.3601040004036],[31.0166659997757,-27.358036000404],[31.011560000029,-27.3491059997517],[31.011560000029,-27.3491059997517],[31.0091162261574,-27.3487723416919],[31.0065350004188,-27.3493920003448],[31.0038109998574,-27.3564619997937],[31.0012860003755,-27.3583490004431],[31.0012860003754,-27.3583490004431],[30.9938965785848,-27.3575190653743],[30.9865059998547,-27.3566890003651],[30.9865059998547,-27.3566890003651],[30.9824540001304,-27.3594879998871],[30.9764139995975,-27.3588979996698],[30.9699399997431,-27.3635789996105],[30.9699399997431,-27.3635789996105],[30.9632430004011,-27.3653240000094],[30.9593529618849,-27.3616281544],[30.9566729545645,-27.3596718038735],[30.9526076053036,-27.3607902744736],[30.943728613358,-27.3681990497346],[30.9406305381112,-27.3665871399063],[30.9411619624095,-27.3601934609164],[30.9379820261326,-27.3547017287945],[30.9383179998781,-27.3457980001489],[30.9311240001091,-27.3399070001892],[30.9274600002838,-27.3345549998945],[30.9275530000741,-27.3270150003639],[30.9275530000741,-27.3270150003639],[30.9250094833366,-27.3240249765054],[30.9215660001858,-27.3199769996921],[30.921318000445,-27.3170889996649],[30.9242129998956,-27.3112369997042],[30.9242129998956,-27.3112369997042],[30.9240937655802,-27.3098736254938],[30.9237480000444,-27.3059200001237],[30.9178712256686,-27.3047063272534],[30.9118229998285,-27.3070910001434],[30.9094910002499,-27.3054099999968],[30.9061760003244,-27.3058640002402],[30.9022249998599,-27.3085899999944],[30.9022249998599,-27.3085899999944],[30.884228000334,-27.3092269996803],[30.8827499996523,-27.3119930003791],[30.8827499996523,-27.3119930003791],[30.8776320002518,-27.3136999999256],[30.8776320002518,-27.3136999999256],[30.8737138854745,-27.3130157047213],[30.8658769997783,-27.3116469997181],[30.8658769997783,-27.3116469997181],[30.8643358547991,-27.3177201508416],[30.8631799995623,-27.3222750004014],[30.8644586217944,-27.3275586914217],[30.865310999768,-27.3310809998343],[30.8620640002791,-27.3350999998362],[30.8616700001035,-27.3395390003128],[30.8592712592036,-27.3385183445648],[30.8562809999019,-27.337245999834],[30.8579850002095,-27.3428170003313],[30.8570999998835,-27.3445779996691],[30.8510040003665,-27.3437229998266],[30.8459850001336,-27.3458899998932],[30.8459850001336,-27.3458899998932],[30.8446640003939,-27.3521020002608],[30.8428880003647,-27.3535800000431],[30.8428880003646,-27.3535800000431],[30.840808999858,-27.3538340000604],[30.840808999858,-27.3538340000604],[30.8378429998324,-27.3511939997739],[30.8297229996462,-27.3507479998992],[30.8214129996948,-27.3546940001332],[30.8214334000966,-27.3499617997554],[30.8214470003628,-27.3468069998957],[30.8214470003628,-27.3468069998957],[30.8243385465151,-27.3463429926426],[30.8272299998406,-27.3458790002854],[30.8272299998407,-27.3458790002854],[30.8273747136758,-27.3452671107527],[30.8280010003076,-27.3426190001974],[30.8280010003075,-27.3426190001974],[30.8268876071047,-27.3416825821994],[30.8250453207703,-27.3401331295202],[30.8214610001088,-27.3391779998597],[30.8205389998758,-27.3361929998577],[30.8205389998758,-27.3361929998577],[30.8184095969285,-27.3381766028938],[30.8169899999557,-27.3394990002676],[30.8169899999557,-27.3394990002676],[30.8141794121747,-27.3391746760821],[30.8085579997764,-27.3385260003817],[30.8114449997576,-27.3319419999533],[30.8037605141831,-27.3342834964616],[30.8022769391263,-27.3314032513641],[30.8090309999964,-27.3278500001837],[30.8061219999004,-27.3270498459409],[30.8045789998199,-27.3239520003637],[30.8006771932336,-27.3247497048353],[30.7995449732512,-27.3254083337322],[30.7991357212507,-27.3258173395874],[30.799148839963,-27.3263189001653],[30.7990498069411,-27.3268467884745],[30.7977420647298,-27.3267787032505],[30.7964285750473,-27.3262695965936],[30.7968270004093,-27.3221869999422],[30.7910270001477,-27.3182350003309],[30.7893409997706,-27.3132709999353],[30.7821160003713,-27.3148479997844],[30.7821160003713,-27.3148479997844],[30.7786980001945,-27.313728000317],[30.7816979999887,-27.31734099959],[30.7859289998705,-27.3189089999237],[30.7852479999549,-27.3242719998261],[30.7771563115648,-27.3241557408898],[30.772551614406,-27.3257274627953],[30.7692550001764,-27.3235760001185],[30.7692550001764,-27.3235760001184],[30.7691744527862,-27.3189449997845],[30.7659149999979,-27.3191049999654],[30.7659149999978,-27.3191049999654],[30.7633909996627,-27.3136900003639],[30.7633909996626,-27.3136900003639],[30.7613483892131,-27.3131720951366],[30.7601811915794,-27.3128761514064],[30.7622716411491,-27.3093933268661],[30.7614969995899,-27.3064229999279],[30.7614969995899,-27.3064229999279],[30.7563947911416,-27.3045246185946],[30.7553100003748,-27.3041209999336],[30.7553100003748,-27.3041209999336],[30.7518907860966,-27.3003673846773],[30.7510360003096,-27.299429000385],[30.7510360003096,-27.299429000385],[30.7502227995388,-27.3001275287348],[30.7435970000388,-27.3058189999645],[30.7426011616395,-27.3043556145337],[30.7419739998678,-27.3034339997415],[30.7438219996187,-27.3002820001352],[30.7413689998583,-27.2984389997155],[30.7413689998583,-27.2984389997155],[30.7406303336742,-27.2960143345717],[30.7402610000447,-27.2948020002354],[30.7402610000447,-27.2948020002354],[30.7355899996655,-27.2946050001477],[30.7300210001597,-27.2997570002162],[30.7280579996043,-27.2998239997074],[30.7280579996043,-27.2998239997074],[30.7270689063925,-27.2981339430403],[30.7255852366864,-27.2955988069695],[30.7262161505833,-27.2946158824501],[30.727477999848,-27.292649999961],[30.72702999697,-27.2908019877521],[30.7265819999142,-27.2889539995599],[30.7265819999142,-27.2889539995599],[30.7251424474905,-27.2894647080023],[30.7251424474905,-27.2894647080023],[30.721046000131,-27.2909180001614],[30.721046000131,-27.2909180001614],[30.7199740107074,-27.2891725628819],[30.7180980000359,-27.286118000131],[30.7190760001523,-27.2834759997523],[30.7190760001522,-27.2834759997523],[30.7137170004343,-27.2855000004216],[30.7137170004343,-27.2855000004216],[30.7075310664726,-27.2830189512277],[30.707045000446,-27.2828240002743],[30.707045000446,-27.2828240002743],[30.7070397276937,-27.2828245253124],[30.7070291839944,-27.2828255752087],[30.7070081038156,-27.2828276742826],[30.7069659723215,-27.2828318695563],[30.7069582911507,-27.2828326344143],[30.7069429326471,-27.2828341637483],[30.6608489996636,-27.2874240000786],[30.6608489996636,-27.2874240000786],[30.5879669999196,-27.3224680003048],[30.5577405798627,-27.327585096205],[30.5518460004094,-27.3250539999008],[30.5518460004094,-27.3250539999008],[30.5463750000251,-27.3252239996432],[30.5410330001914,-27.3211400002424],[30.5410306834137,-27.3211390091436],[30.5272879997166,-27.3152599998905],[30.5272879997166,-27.3152599998905],[30.528376000407,-27.2921850001098],[30.5024949998824,-27.2830560001768],[30.525528000425,-27.2548959998188],[30.5246179998459,-27.235666000113],[30.5298599995666,-27.2375909998161],[30.5671420004342,-27.1690119996756],[30.5514110001424,-27.1740839996537],[30.5437739997378,-27.1740530000233],[30.5341169997475,-27.1686120001227],[30.544688999648,-27.1271479998333],[30.5513879999816,-27.1250510002956],[30.5610490001562,-27.0978910001687],[30.5530849999664,-27.0950450002789],[30.5689429998172,-27.0466400001918],[30.5774040004339,-27.0155260003614],[30.5923210000753,-26.9962939996641],[30.5560170002233,-26.9364049999045],[30.527167999581,-26.9426099999494],[30.5093769996584,-26.9006540003629],[30.4886039998721,-26.869009000337],[30.4607330002454,-26.8824330004039],[30.4513399998341,-26.846668000217],[30.4319360002015,-26.8501760000458],[30.4255079997696,-26.8155189996725],[30.4238590001987,-26.7874410003964],[30.3967000001179,-26.7824060003252],[30.3987080000497,-26.7659109998892],[30.3987268944434,-26.7658562989204],[30.4010465396039,-26.7591407175961],[30.4012349836014,-26.7591329409457],[30.403687446167,-26.7611929182614],[30.4064709999673,-26.7635309998966]]]}
		];
		original.forEach( function( geojson, i ) {
			console.log('REPEATS REMOVED ' + i);
			recursiveFix(geojson.coordinates);
			
			var repeats = findDuplicates(geojson.coordinates);
			
			if (repeats.length) {
				console.log('REPEATS LEFT ' + i);
				console.log(repeats);
			}
		} );
	}

	// Find Geo JSON
	exports.findSKMDesignGeoJSON = ( req, res ) => {

		var geometry_file_location = 'assets/geo-json/design-block/' + req.params.id + '.enc';
		var results = [];
		var count_block = 0;

		if ( fs.existsSync( geometry_file_location ) ) {
			var data_geometry = gp.parse( JSON.parse( fs.readFileSync( geometry_file_location ) ), 4 );
			
			//console.log(data_geometry)
			
			if ( data_geometry.features ) {
				//var i = 0;
				data_geometry.features.forEach( function( data, y ) {
					var coordinates = data.geometry.coordinates;
					var coordinate = coordinates[0];
					// Attributes
					var temporary_geometry = {
						coords: [],
						blokname: String( data.properties.REBLOCK ),
						blokcode: String( data.properties.BLOCK_CODE )
					};

					for(var i = 0; i < coordinate.length; i++) {
						for(var j = i + 1; j < coordinate.length; ) {
							if(coordinate[i][0] == coordinate[j][0] && coordinate[i][1] == coordinate[j][1])
								// Found the same. Remove it.
								coordinate.splice(j, 1);
							else
								// No match. Go ahead.
								j++;
						}
					}

					// Geometry
					temporary_geometry.coords = [];
					coordinate.forEach( function( locs ) {
						temporary_geometry.coords.push( {
							longitude: locs[0],
							latitude: locs[1]
						} );
					} );
					//results.push( temporary_geometry );
					results.push( temporary_geometry );

					/*
					var original = [
						data.geometry
					];
					var z = 0;
					recursiveFix( data.geometry.coordinates );
					var repeats = findDuplicates( data.geometry.coordinates );
					if (repeats.length) {
						console.log('REPEATS LEFT ' + i);
						console.log(repeats);
					}

					// Attributes
					var temporary_geometry = {
						coords: [],
						blokname: String( data.properties.REBLOCK ),
						blokcode: String( data.properties.BLOCK_CODE )
					};

					// Geometry
					temporary_geometry.coords = [];
					data.geometry.coordinates.forEach( function( geom ) {
						geom.forEach( function( location ) {
							temporary_geometry.coords.push( {
								longitude: location[0],
								latitude: location[1]
							} );
						} );
					} );
					results.push( temporary_geometry );
					/*
					data.geometry.forEach( function( geojson, i ) {

						console.log( geojson );

						//console.log( i );
						//console.log('REPEATS REMOVED ' + i);
						//console.log(geojson);
						//
						
						//
						
						//if (repeats.length) {
						//	console.log('REPEATS LEFT ' + i);
						//	console.log(repeats);
						//}
						
						//console.log(geojson);	
					} );
				
					//results.push( original );

					//console.log(data.geometry);
					*/
				} );
				res.json( {
					status: true,
					message: "Success!",
					data: {
						polygons: results
					}
				} );
			}
			else {
				res.json( {
					status: false,
					message: "Error! Invalid geometry data. ",
					data: []
				} );
				console.log( 'Error! Invalid geometry data. ' );
			}
		}
		else {
			res.json( {
				status: false,
				message: "Error! Geometry data file not found. ",
				data: []
			} );
			console.log( 'Error! Geometry data file not found. ' );
		}
		
	}

	// Find Geo JSON 2
	exports.findSKMDesignGeoJSON__2 = ( req, res ) => {

		var geometry_file_location = 'assets/geo-json/design-block/' + req.params.id + '.enc';
		var results = [];

		if ( fs.existsSync( geometry_file_location ) ) {
			var data_geometry = JSON.parse( fs.readFileSync( geometry_file_location ) );

			if ( data_geometry.features ) {
				var i = 0;
				data_geometry.features.forEach( function( data ) {
					var temporary_geometry = [];
					// Attributes
					var temporary_geometry = {
						coords: [],
						blokname: String( data.properties.REBLOCK ),
						blokcode: String( data.properties.BLOCK_CODE )
					};

					// Geometry
					temporary_geometry.coords = [];
					data.geometry.coordinates.forEach( function( geom ) {
						geom.forEach( function( location ) {
							temporary_geometry.coords.push( {
								longitude: location[0],
								latitude: location[1]
							} );
						} );
					} );
					results.push( temporary_geometry );
				} );
				res.json( {
					status: true,
					message: "Success!",
					data: {
						polygons: results
					}
				} );
			}
			else {
				res.json( {
					status: false,
					message: "Error! Invalid geometry data. ",
					data: []
				} );
				console.log( 'Error! Invalid geometry data. ' );
			}
			
		}
		else {
			res.json( {
				status: false,
				message: "Error! Geometry data file not found. ",
				data: []
			} );
			console.log( 'Error! Geometry data file not found. ' );
		}
		
	}

	// Find Geo JSON - 1
	exports.findSKMDesignGeoJSON__1 = ( req, res ) => {

		var geometry_file_location = 'assets/geo-json/design-block/' + req.params.id + '.enc';
		var results = [];

		if ( fs.existsSync( geometry_file_location ) ) {
			var data_geometry = JSON.parse( fs.readFileSync( geometry_file_location ) );

			if ( data_geometry.features ) {
				var i = 0;
				data_geometry.features.forEach( function( data ) {
					var temporary_geometry = [];
					// Attributes
					var temporary_geometry = {
						//attributes: {
						//	WERKS_AFD_CODE: String( data.attributes.WERKS ) + String( data.attributes.AFD_CODE ).substr( 4, 10 ),
						//	WERKS_AFD_BLOCK_CODE: String( data.attributes.WERKS ) + String( data.attributes.AFD_CODE ).substr( 4, 10 ) + String( data.attributes.BLOCK_CODE ),
						//	WERKS: String( data.attributes.WERKS ),
						//	AFD_CODE: String( data.attributes.AFD_CODE ).substr( 4, 10 ),
						//	BLOCK_CODE: String( data.attributes.BLOCK_CODE ),
						//	BLOCK_NAME: String( data.attributes.REBLOCK ),
						//},

						coords: [],
						blokname: String( data.attributes.REBLOCK ),
						blokcode: String( data.attributes.BLOCK_CODE )
					};
					// Geometry
					temporary_geometry.coords = [];
					data.geometry.rings.forEach( function( geom ) {
						geom.forEach( function( location ) {
							temporary_geometry.coords.push( {
								longitude: location[0],
								latitude: location[1]
							} );
						} );
					} );
					results.push( temporary_geometry );
				} );
				res.json( {
					status: true,
					message: "Success!",
					data: {
						polygons: results
					}
				} );
			}
			else {
				res.json( {
					status: false,
					message: "Error! Invalid geometry data. ",
					data: []
				} );
				console.log( 'Error! Invalid geometry data. ' );
			}
			
		}
		else {
			res.json( {
				status: false,
				message: "Error! Geometry data file not found. ",
				data: []
			} );
			console.log( 'Error! Geometry data file not found. ' );
		}
		
	}

	// Retrieve and return all notes from the database.
	exports.find = ( req, res ) => {

		url_query = req.query;
		var url_query_length = Object.keys( url_query ).length;

		// Auth Data
		var auth = req.auth;

		//auth.REFFERENCE_ROLE = 'COMP_CODE';
		//auth.LOCATION_CODE = '21';
		console.log(auth);

		var location_code_group = auth.LOCATION_CODE.split( ',' );
		var ref_role = auth.REFFERENCE_ROLE;
		var location_code_final = [];
		var key = [];
		var query = {};
			query["END_VALID"] = 99991231;
		
		if ( ref_role != 'ALL' ) {
			location_code_group.forEach( function( data ) {
				switch ( ref_role ) {
					case 'REGION_CODE':
						location_code_final.push( data.substr( 0, 2 ) );
					break;
					case 'COMP_CODE':
						location_code_final.push( data.substr( 0, 2 ) );
					break;
					case 'AFD_CODE':
						location_code_final.push( data );
					break;
					case 'BA_CODE':
						location_code_final.push( data.substr( 0, 4 ) );
					break;
				}
			} );
		}

		switch ( ref_role ) {
			case 'REGION_CODE':
				key = ref_role;
				query[key] = location_code_final;
			break;
			case 'COMP_CODE':
				key = ref_role;
				query[key] = location_code_final;
			break;
			case 'AFD_CODE':
				key = 'WERKS_AFD_CODE';
				query[key] = location_code_final;
			break;
			case 'BA_CODE':
				key = 'WERKS';
				query[key] = location_code_final;
			break;
			case 'NATIONAL':
				key = 'NATIONAL';
				query[key] = 'NATIONAL';
			break;
		}
		
		blockModel.find( query )
		.select( {
			_id: 0,
			REGION_CODE: 1,
			COMP_CODE: 1,
			EST_CODE: 1,
			WERKS: 1,
			AFD_CODE: 1,
			BLOCK_CODE: 1,
			BLOCK_NAME: 1,
			WERKS_AFD_CODE: 1,
			WERKS_AFD_BLOCK_CODE: 1,
			LATITUDE_BLOCK: 1,
			LONGITUDE_BLOCK: 1
		} )
		.then( data => {
			if( !data ) {
				return res.send( {
					status: false,
					message: 'Data not found 2',
					data: {}
				} );
			}
			res.send( {
				status: true,
				message: 'Success',
				data: data
			} );
		} ).catch( err => {
			if( err.kind === 'ObjectId' ) {
				return res.send( {
					status: false,
					message: 'Data not found 1',
					data: {}
				} );
			}
			return res.send( {
				status: false,
				message: 'Error retrieving data',
				data: {}
			} );
		} );

	};



// Create and Save new Data
exports.create = ( req, res ) => {
	
	if( !req.body.BLOCK_CODE || !req.body.BLOCK_NAME ) {
		return res.status( 400 ).send({
			status: false,
			message: 'Invalid input',
			data: {}
		});
	}

	const block = new blockModel({
		REGION_CODE: req.body.REGION_CODE || "",
		COMP_CODE: req.body.COMP_CODE || "",
		EST_CODE: req.body.EST_CODE || "",
		WERKS: req.body.WERKS || "",
		AFD_CODE: req.body.AFD_CODE || "",
		BLOCK_CODE: req.body.BLOCK_CODE || "",
		BLOCK_NAME: req.body.BLOCK_NAME || "",
		WERKS_AFD_BLOCK_CODE: req.body.WERKS_AFD_BLOCK_CODE || "",
		LATITUDE_BLOCK: req.body.LATITUDE_BLOCK || "",
		LONGITUDE_BLOCK: req.body.LONGITUDE_BLOCK || "",
		START_VALID: ( req.body.START_VALID != '' ) ? date.parse( req.body.START_VALID, 'YYYY-MM-DD' ) : "",
		END_VALID: ( req.body.END_VALID != '' ) ? date.parse( req.body.END_VALID, 'YYYY-MM-DD' ) : "",
		INSERT_USER: req.body.INSERT_USER || "",
		INSERT_TIME: ( req.body.INSERT_TIME != '' ) ? date.parse( req.body.INSERT_TIME, 'YYYY-MM-DD HH:mm:ss' ) : "",
		UPDATE_USER: req.body.UPDATE_USER || "",
		UPDATE_TIME: ( req.body.UPDATE_TIME != '' ) ? date.parse( req.body.UPDATE_TIME, 'YYYY-MM-DD HH:mm:ss' ) : ""
	});

	block.save()
	.then( data => {

		res.send({
			status: true,
			message: 'Success',
			data: data
		});
	} ).catch( err => {
		res.status( 500 ).send( {
			status: false,
			message: 'Some error occurred while creating data',
			data: {}
		} );
	} );
	
};

// Retrieve and return all notes from the database.
exports.find2 = ( req, res ) => {

	// Output Query URL
	//console.log(req.query);
	// Count JSON length
	//console.log( Object.keys( req.query ).length );

	url_query = req.query;
	var url_query_length = Object.keys( url_query ).length;
	
	if ( url_query_length > 0 ) {
		console.log( req.query );

		blockModel.find( url_query )
		.then( data => {
			if( !data ) {
				return res.status( 404 ).send( {
					status: false,
					message: 'Data not found 2',
					data: {}
				} );
			}
			res.send( {
				status: true,
				message: 'Success',
				data: data
			} );
		} ).catch( err => {
			if( err.kind === 'ObjectId' ) {
				return res.status( 404 ).send( {
					status: false,
					message: 'Data not found 1',
					data: {}
				} );
			}
			return res.status( 500 ).send( {
				status: false,
				message: 'Error retrieving data',
				data: {}
			} );
		} );
	}
	else {
		blockModel.find()
		.then( data => {
			res.send( {
				status: true,
				message: 'Success',
				data: data
			} );
		} ).catch( err => {
			res.status( 500 ).send( {
				status: false,
				message: err.message || "Some error occurred while retrieving data.",
				data: {}
			} );
		} );
	}

};

// Find a single data with a ID
exports.findOne = ( req, res ) => {
	blockModel.findOne( { 
		WERKS_AFD_BLOCK_CODE: req.params.id 
	} ).then( data => {
		if( !data ) {
			return res.status(404).send({
				status: false,
				message: "Data not found 2 with id " + req.params.id,
				data: {}
			});
		}
		res.send( {
			status: true,
			message: 'Success',
			data: data
		} );
	} ).catch( err => {
		if( err.kind === 'ObjectId' ) {
			return res.status( 404 ).send({
				status: false,
				message: "Data not found 1 with id " + req.params.id,
				data: {}
			});
		}
		return res.status( 500 ).send({
			status: false,
			message: "Error retrieving Data with id " + req.params.id,
			data: {}
		} );
	} );
};

// Update single data with ID
exports.update = ( req, res ) => {

	// Validation
	if( !req.body.COMP_CODE ) {
		return res.status( 400 ).send( {
			status: false,
			message: 'Invalid Input',
			data: {}
		});
	}
	
	blockModel.findOneAndUpdate( { 
		WERKS_AFD_BLOCK_CODE : req.params.id 
	}, {
		REGION_CODE: req.body.REGION_CODE || "",
		COMP_CODE: req.body.COMP_CODE || "",
		EST_CODE: req.body.EST_CODE || "",
		WERKS: req.body.WERKS || "",
		AFD_CODE: req.body.AFD_CODE || "",
		BLOCK_CODE: req.body.BLOCK_CODE || "",
		BLOCK_NAME: req.body.BLOCK_NAME || "",
		WERKS_AFD_BLOCK_CODE: req.body.WERKS_AFD_BLOCK_CODE || "",
		LATITUDE_BLOCK: req.body.LATITUDE_BLOCK || "",
		LONGITUDE_BLOCK: req.body.LONGITUDE_BLOCK || "",
		START_VALID: ( req.body.START_VALID != '' ) ? date.parse( req.body.START_VALID, 'YYYY-MM-DD' ) : "",
		END_VALID: ( req.body.END_VALID != '' ) ? date.parse( req.body.END_VALID, 'YYYY-MM-DD' ) : "",
		UPDATE_USER: req.body.UPDATE_USER || "",
		UPDATE_TIME: new Date()
	}, { new: true } )
	.then( data => {
		if( !data ) {
			return res.status( 404 ).send( {
				status: false,
				message: "Data not found 1 with id " + req.params.id,
				data: {}
			} );
		}
		res.send( {
			status: true,
			message: 'Success',
			data: data
		} );
	}).catch( err => {
		if( err.kind === 'ObjectId' ) {
			return res.status( 404 ).send( {
				status: false,
				message: "Data not found 2 with id " + req.params.id,
				data: {}
			} );
		}
		return res.status( 500 ).send( {
			status: false,
			message: "Data error updating with id " + req.params.id,
			data: {}
		} );
	});
};

// Delete data with the specified ID in the request
exports.delete = ( req, res ) => {
	blockModel.findOneAndRemove( { WERKS_AFD_BLOCK_CODE : req.params.id } )
	.then( data => {
		if( !data ) {
			return res.status( 404 ).send( {
				status: false,
				message: "Data not found 2 with id " + req.params.id,
				data: {}
			} );
		}
		res.send( {
			status: true,
			message: 'Success',
			data: {}
		} );
	}).catch( err => {
		if( err.kind === 'ObjectId' || err.name === 'NotFound' ) {
			return res.status(404).send({
				status: false,
				message: "Data not found 1 with id " + req.params.id,
				data: {}
			} );
		}
		return res.status( 500 ).send( {
			status: false,
			message: "Could not delete data with id " + req.params.id,
			data: {}
		} );
	} );
};











/*
|--------------------------------------------------------------------------
| Clear Function
|--------------------------------------------------------------------------
*/
	// Create or update data
	exports.createOrUpdate = ( req, res ) => {

		if ( 
			!req.body.NATIONAL || 
			!req.body.REGION_CODE || 
			!req.body.COMP_CODE || 
			!req.body.EST_CODE || 
			!req.body.WERKS || 
			!req.body.AFD_CODE || 
			!req.body.WERKS_AFD_BLOCK_CODE ||
			!req.body.START_VALID ||
			!req.body.END_VALID
		) {
			return res.send({
				status: false,
				message: 'Invalid input',
				data: {}
			});
		}

		blockModel.findOne( { 
			WERKS_AFD_BLOCK_CODE: req.body.WERKS_AFD_BLOCK_CODE,
			START_VALID: date.convert( req.body.START_VALID, 'YYYYMMDD' )
		} ).then( data => {

			// Kondisi belum ada data, create baru dan insert ke Sync List
			if( !data ) {
				
				const set = new blockModel( {
					NATIONAL: req.body.NATIONAL || "",
					REGION_CODE: req.body.REGION_CODE || "",
					COMP_CODE: req.body.COMP_CODE || "",
					EST_CODE: req.body.EST_CODE || "",
					WERKS: req.body.WERKS || "",
					AFD_CODE: req.body.AFD_CODE || "",
					BLOCK_CODE: req.body.BLOCK_CODE || "",
					BLOCK_NAME: req.body.BLOCK_NAME || "",
					WERKS_AFD_CODE: req.body.WERKS_AFD_CODE || "",
					WERKS_AFD_BLOCK_CODE: req.body.WERKS_AFD_BLOCK_CODE || "",
					LATITUDE_BLOCK: req.body.LATITUDE_BLOCK || "",
					LONGITUDE_BLOCK: req.body.LONGITUDE_BLOCK || "",
					START_VALID: date.convert( req.body.START_VALID, 'YYYYMMDD' ),
					END_VALID: date.convert( req.body.END_VALID, 'YYYYMMDD' ),
					INSERT_TIME: date.convert( 'now', 'YYYYMMDDhhmmss' ),
					DELETE_TIME: null,
					UPDATE_TIME: null
				} );

				set.save()
				.then( data => {
					res.send({
						status: true,
						message: 'Success 2',
						data: {}
					});
				} ).catch( err => {
					res.send( {
						status: false,
						message: 'Some error occurred while creating data',
						data: {}
					} );
				} );
			}
			// Kondisi data sudah ada, check value, jika sama tidak diupdate, jika beda diupdate dan dimasukkan ke Sync List
			else {
				
				if ( 
					data.NATIONAL != req.body.NATIONAL || 
					data.REGION_CODE != req.body.REGION_CODE || 
					data.COMP_CODE != req.body.COMP_CODE || 
					data.EST_CODE != req.body.EST_CODE || 
					data.WERKS != req.body.WERKS || 
					data.AFD_CODE != req.body.AFD_CODE || 
					data.BLOCK_NAME != req.body.BLOCK_NAME || 
					data.LATITUDE_BLOCK != req.body.LATITUDE_BLOCK || 
					data.LONGITUDE_BLOCK != req.body.LONGITUDE_BLOCK || 
					data.END_VALID != date.convert( req.body.END_VALID, 'YYYYMMDD' )
				) {

					var data_update;
					if ( date.convert( req.body.END_VALID, 'YYYYMMDD' ) == '99991231' ) {
						data_update = {
							NATIONAL: req.body.NATIONAL || "",
							REGION_CODE: req.body.REGION_CODE || "",
							COMP_CODE: req.body.COMP_CODE || "",
							EST_CODE: req.body.EST_CODE || "",
							WERKS: req.body.WERKS || "",
							AFD_CODE: req.body.AFD_CODE || "",
							BLOCK_CODE: req.body.BLOCK_CODE || "",
							BLOCK_NAME: req.body.BLOCK_NAME || "",
							LATITUDE_BLOCK: req.body.LATITUDE_BLOCK || "",
							LONGITUDE_BLOCK: req.body.LONGITUDE_BLOCK || "",
							END_VALID: date.convert( req.body.END_VALID, 'YYYYMMDD' ),
							UPDATE_TIME: date.convert( 'now', 'YYYYMMDDhhmmss' )
						}
					}
					else {
						data_update = {
							NATIONAL: req.body.NATIONAL || "",
							REGION_CODE: req.body.REGION_CODE || "",
							COMP_CODE: req.body.COMP_CODE || "",
							EST_CODE: req.body.EST_CODE || "",
							WERKS: req.body.WERKS || "",
							AFD_CODE: req.body.AFD_CODE || "",
							BLOCK_CODE: req.body.BLOCK_CODE || "",
							BLOCK_NAME: req.body.BLOCK_NAME || "",
							LATITUDE_BLOCK: req.body.LATITUDE_BLOCK || "",
							LONGITUDE_BLOCK: req.body.LONGITUDE_BLOCK || "",
							END_VALID: date.convert( req.body.END_VALID, 'YYYYMMDD' ),
							DELETE_TIME: date.convert( 'now', 'YYYYMMDDhhmmss' )
						}
					}

					blockModel.findOneAndUpdate( { 
						WERKS_AFD_BLOCK_CODE: req.body.WERKS_AFD_BLOCK_CODE,
						START_VALID: date.convert( req.body.START_VALID, 'YYYYMMDD' )
					}, data_update, { new: true } )
					.then( data => {
						if( !data ) {
							return res.send( {
								status: false,
								message: "Data error updating 2 ",
								data: {}
							} );
						}
						else {
							res.send({
								status: true,
								message: 'Success',
								data: {}
							});
						}
					}).catch( err => {
						if( err.kind === 'ObjectId' ) {
							return res.send( {
								status: false,
								message: "Data not found 2",
								data: {}
							} );
						}
						return res.send( {
							status: false,
							message: "Data error updating",
							data: {}
						} );
					});
				}
				else {
					res.send( {
						status: true,
						message: 'Skip Update',
						data: {}
					} );
				}
			}
			
		} ).catch( err => {
			if( err.kind === 'ObjectId' ) {
				return res.send({
					status: false,
					message: "Data not found 1",
					data: {}
				});
			}

			return res.send({
				status: false,
				message: "Error retrieving Data",
				data: {}
			} );
		} );
	};

	// Find All
	exports.findAll = ( req, res ) => {
		var url_query = req.query;
		var url_query_length = Object.keys( url_query ).length;
		
		url_query.END_VALID = 99991231;

		blockModel.find( url_query )
		.select( {
			_id: 0,
			REGION_CODE: 1,
			COMP_CODE: 1,
			EST_CODE: 1,
			WERKS: 1,
			AFD_CODE: 1,
			BLOCK_CODE: 1,
			BLOCK_NAME: 1,
			WERKS_AFD_BLOCK_CODE: 1,
			LATITUDE_BLOCK: 1,
			LONGITUDE_BLOCK: 1
		} )
		.then( data => {
			if( !data ) {
				return res.send( {
					status: false,
					message: 'Data not found 2',
					data: {}
				} );
			}
			res.send( {
				status: true,
				message: 'Success',
				data: data
			} );
		} ).catch( err => {
			if( err.kind === 'ObjectId' ) {
				return res.send( {
					status: false,
					message: 'Data not found 1',
					data: {}
				} );
			}
			return res.send( {
				status: false,
				message: 'Error retrieving data',
				data: {}
			} );
		} );
	}

	// Sync Mobile
	exports.syncMobile = ( req, res ) => {

	// Auth Data
	var auth = req.auth;
	//auth.REFFERENCE_ROLE = 'AFD_CODE';
	//auth.LOCATION_CODE = '2121D,2121H,2121E,2121C';

	var start_date = date.convert( req.params.start_date, 'YYYYMMDDhhmmss' );
	var end_date = date.convert( req.params.end_date, 'YYYYMMDDhhmmss' );
	console.log( start_date + ' / ' + end_date );
	var location_code_group = auth.LOCATION_CODE.split( ',' );
	var ref_role = auth.REFFERENCE_ROLE;
	var location_code_final = [];
	var key = [];
	var query = {};
		query["END_VALID"] = 99991231;
	
	if ( ref_role != 'ALL' ) {
		location_code_group.forEach( function( data ) {
			switch ( ref_role ) {
				case 'REGION_CODE':
					location_code_final.push( data.substr( 0, 2 ) );
				break;
				case 'COMP_CODE':
					location_code_final.push( data.substr( 0, 2 ) );
				break;
				case 'AFD_CODE':
					location_code_final.push( data );
				break;
				case 'BA_CODE':
					location_code_final.push( data.substr( 0, 4 ) );
				break;
			}
		} );
	}

	switch ( ref_role ) {
		case 'REGION_CODE':
			key = ref_role;
			query[key] = location_code_final;
		break;
		case 'COMP_CODE':
			key = ref_role;
			query[key] = location_code_final;
		break;
		case 'AFD_CODE':
			key = 'WERKS_AFD_CODE';
			query[key] = location_code_final;
		break;
		case 'BA_CODE':
			key = 'WERKS';
			query[key] = location_code_final;
		break;
		case 'NATIONAL':
			key = 'NATIONAL';
			query[key] = 'NATIONAL';
		break;
	}

	// Set Data
	blockModel
	.find( 
		query,
		{
			$and: [
				{
					$or: [
						{
							INSERT_TIME: {
								$gte: start_date,
								$lte: end_date
							}
						},
						{
							UPDATE_TIME: {
								$gte: start_date,
								$lte: end_date
							}
						},
						{
							DELETE_TIME: {
								$gte: start_date,
								$lte: end_date
							}
						}
					]
				}
			]
		}
		
	)
	.select( {
		_id: 0,
		REGION_CODE: 1,
		COMP_CODE: 1,
		EST_CODE: 1,
		WERKS: 1,
		AFD_CODE: 1,
		BLOCK_CODE: 1,
		BLOCK_NAME: 1,
		WERKS_AFD_CODE: 1,
		WERKS_AFD_BLOCK_CODE: 1,
		LATITUDE_BLOCK: 1,
		LONGITUDE_BLOCK: 1,
		INSERT_TIME: 1,
		DELETE_TIME: 1,
		UPDATE_TIME: 1
	} )
	.then( data_insert => {
		//console.log(data_insert);
		//console.log(start_date);
		//console.log(end_date);
		var temp_insert = [];
		var temp_update = [];
		var temp_delete = [];

		data_insert.forEach( function( data ) {

			if ( data.DELETE_TIME >= start_date && data.DELETE_TIME <= end_date ) {
				temp_delete.push( {
					REGION_CODE: data.REGION_CODE,
					COMP_CODE: data.COMP_CODE,
					EST_CODE: data.EST_CODE,
					WERKS: data.WERKS,
					AFD_CODE: data.AFD_CODE,
					BLOCK_CODE: data.BLOCK_CODE,
					BLOCK_NAME: data.BLOCK_NAME,
					BLOCK_NAME: data.BLOCK_NAME,
					WERKS_AFD_CODE: data.WERKS_AFD_CODE,
					WERKS_AFD_BLOCK_CODE: data.WERKS_AFD_BLOCK_CODE,
					LATITUDE_BLOCK: data.LATITUDE_BLOCK,
					LONGITUDE_BLOCK: data.LONGITUDE_BLOCK
				} );
			}

			if ( data.INSERT_TIME >= start_date && data.INSERT_TIME <= end_date ) {
				temp_insert.push( {
					REGION_CODE: data.REGION_CODE,
					COMP_CODE: data.COMP_CODE,
					EST_CODE: data.EST_CODE,
					WERKS: data.WERKS,
					AFD_CODE: data.AFD_CODE,
					BLOCK_CODE: data.BLOCK_CODE,
					BLOCK_NAME: data.BLOCK_NAME,
					BLOCK_NAME: data.BLOCK_NAME,
					WERKS_AFD_CODE: data.WERKS_AFD_CODE,
					WERKS_AFD_BLOCK_CODE: data.WERKS_AFD_BLOCK_CODE,
					LATITUDE_BLOCK: data.LATITUDE_BLOCK,
					LONGITUDE_BLOCK: data.LONGITUDE_BLOCK
				} );
			}

			if ( data.UPDATE_TIME >= start_date && data.UPDATE_TIME <= end_date ) {
				temp_update.push( {
					REGION_CODE: data.REGION_CODE,
					COMP_CODE: data.COMP_CODE,
					EST_CODE: data.EST_CODE,
					WERKS: data.WERKS,
					AFD_CODE: data.AFD_CODE,
					BLOCK_CODE: data.BLOCK_CODE,
					BLOCK_NAME: data.BLOCK_NAME,
					BLOCK_NAME: data.BLOCK_NAME,
					WERKS_AFD_CODE: data.WERKS_AFD_CODE,
					WERKS_AFD_BLOCK_CODE: data.WERKS_AFD_BLOCK_CODE,
					LATITUDE_BLOCK: data.LATITUDE_BLOCK,
					LONGITUDE_BLOCK: data.LONGITUDE_BLOCK
				} );
			}

		} );

		res.json({
			status: true,
			message: 'Data Sync tanggal ' + date.convert( req.params.start_date, 'YYYY-MM-DD' ) + ' s/d ' + date.convert( req.params.end_date, 'YYYY-MM-DD' ),
			data: {
				"hapus": temp_delete,
				"simpan": temp_insert,
				"ubah": temp_update
			}
		});
	} ).catch( err => {
		if( err.kind === 'ObjectId' ) {
			return res.send({
				status: false,
				message: "ObjectId Error",
				data: {}
			});
		}

		return res.send({
			status: false,
			message: "Error",
			data: {}
		} );
	});
}